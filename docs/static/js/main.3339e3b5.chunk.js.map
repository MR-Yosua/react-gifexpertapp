{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiffExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","cate","type","value","onChange","e","target","getGiffs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GiffExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"qMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OACI,0BAAMC,SAXU,SAACC,GACjBA,EAAMC,iBAEHJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAIP,GAAJ,mBAAkBO,OACrCN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACC,GACvBV,EAAcU,EAAEC,OAAOH,Y,uBCNlBI,EAAQ,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEVC,EAFU,iDAEuCC,UAAUH,GAFjD,+DAGGI,MAAMF,GAHT,cAGVG,EAHU,gBAIKA,EAAKC,OAJV,uBAITC,EAJS,EAITA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAVzB,kBAaTM,GAbS,4CAAH,sDCDRO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAIlC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,+BAAKA,EAAL,OCJCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAY,IAAD,EAEVf,mBAAS,CAE/BsB,KAAM,GACNa,SAAS,IALuB,mBAE7BC,EAF6B,KAEtBC,EAFsB,KAuBpC,OAdAC,qBAAU,WACNxB,EAAUC,GACTwB,MAAK,SAAAd,GAEFY,EAAS,CACLf,KAAKG,EACLU,SAAS,SAInB,CAACpB,IAIIqB,EDnBuBI,CAAazB,GAA/Ba,EAHuB,EAG5BN,KAAYa,EAHgB,EAGhBA,QAMnB,OAEI,kBAAC,WAAD,KAEA,gCAAQpB,EAAR,KAEEoB,GAAW,uBAAGJ,UAAY,qCAAf,WAEb,yBAAKA,UAAW,+CAEJH,EAAOJ,KAAM,SAAAC,GAAG,OACZ,kBAAC,EAAD,eACAgB,IAAOhB,EAAIC,IACPD,UEMbiB,EA7BO,WAAI,MAIc1C,mBAAS,CAAC,iBAJxB,mBAIf2C,EAJe,KAIH5C,EAJG,KAQtB,OACI,kBAAC,WAAD,KACI,6CACA,kBAAC,EAAD,CAAaA,cAAkBA,IAC/B,6BACJ,4BAEQ4C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACAA,SAAYA,EACZ0B,IAAK1B,UChBnB6B,G,MAAUC,SAASC,cAAc,UACvCC,IAASC,OACL,kBAAC,EAAD,MACAJ,I","file":"static/js/main.3339e3b5.chunk.js","sourcesContent":["import React, { Fragment as form,useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    const handleInputChange = (e)=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit= (event)=>{\r\n        event.preventDefault(); //evita refrescar el navegador\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategories( cate =>[inputValue,...cate]);\r\n            setInputValue('');\r\n        }\r\n            \r\n    }\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit} >\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange = {handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const getGiffs = async(category)=>{\r\n    //encodeuri adapta la busqueda quitando espacios y reemplazando para disponer la url\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=76DCxFXAZzZiUCs7OxOr8cF0ln0mbaga`;\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json(); \r\n\r\n        const gifs = data.map(img =>{\r\n            return {\r\n                id: img.id,\r\n                title:img.title,\r\n                url:img.images?.downsized_medium.url\r\n            }\r\n        })\r\n        return gifs;\r\n    }\r\n    ","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n\r\n    // console.log(id,title,url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={ title}/>\r\n            <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n","// import React, { Fragment as div, useState, useEffect, Fragment } from 'react'\r\nimport React, { Fragment } from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n\r\n    const {data:images,loading} = useFetchGifs(category);\r\n    \r\n    // console.log(loading);\r\n\r\n\r\n    \r\n    return (\r\n\r\n        <Fragment>\r\n        \r\n        <h3  > {category} </h3>\r\n\r\n        { loading && <p className = \"animate__animated animate__flash \">Loading</p> }\r\n\r\n        <div className =\"card-grid animate__animated animate__fadeIn\">\r\n                {\r\n                    images.map( (img =>(\r\n                        <GifGridItem \r\n                        key = {img.id}\r\n                        {...img}\r\n                        />\r\n                    )))\r\n                }\r\n        </div>\r\n        </Fragment>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGiffs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = (category)=>{\r\n\r\n    const [state, setState] = useState({\r\n\r\n        data: [],\r\n        loading: true\r\n\r\n    });\r\n    // //use effect solo se ejecuta 1 vez - el segundo parametro es un parametro de dependencia Array\r\n    useEffect(()=>{\r\n        getGiffs( category )\r\n        .then(img =>{\r\n\r\n            setState({\r\n                data:img,\r\n                loading: false\r\n            });    \r\n            \r\n        })\r\n    },[category])\r\n\r\n    \r\n\r\n    return state; // {data:[], loading: true};\r\n}","import React, { Fragment, useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GiffExpertApp = ()=>{\r\n\r\n    // const categories = ['Boku no Hero','One Punch Man','Hunter x Hunter'];\r\n\r\n    const [categories, setCategories] = useState(['Boku no Hero']);\r\n\r\n    \r\n\r\n    return(\r\n        <Fragment>\r\n            <h2>GiffExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories } />\r\n            <hr/>\r\n        <ol>\r\n            { \r\n                categories.map(category =>(\r\n                    <GifGrid\r\n                    category = {category}\r\n                    key={category}\r\n                    />\r\n                ))\r\n            }\r\n        </ol>\r\n        \r\n        </Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default GiffExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GiffExpert from './GiffExpertApp';\nimport './index.css';\n\n\nconst divRoot = document.querySelector('#root'); \nReactDOM.render(\n    <GiffExpert />,\n    divRoot\n  // document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}